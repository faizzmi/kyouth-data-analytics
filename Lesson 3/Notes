df.info() # df.info(number_of_row u want to see) default 5
df.tail()

df.dtypes
df.describe()

Missing Data Handling:
- Removal:- drop entire row (eg: Food_Type = ['Japanese','Western', 'Local', 'Turkish','Chinese']): for categorial data
    dropna

- Imputation:- use mean to change the missing data or median (if the is changes in mean): for numerical data only
    fillna

Data Manipulation:
- create new colum
    #create new column
    df['New_Column] =  df['Old_Column'] + 10

- encode categorial data
    #map the category
    category_mapping = {
        'Cold': 0,
        'Hot': 1
    }

    # Apply the mapping
    df['Category_Encoded'] = df['Category'].map(category_mapping)

- extract from date columns

# Ensure 'Date_of_Visit' is in datetime format
    df['Date_of_Visit'] = pd.to_datetime(df['Date_of_Visit'])

    # Extract useful date-based features
    df['Year'] = df['Date_of_Visit'].dt.year
    df['Month'] = df['Date_of_Visit'].dt.month
    df['Day'] = df['Date_of_Visit'].dt.day
    df['Day_of_Week'] = df['Date_of_Visit'].dt.day_name()

    # Display the transformed dataset
    df[['Date_of_Visit', 'Year', 'Month', 'Day', 'Day_of_Week']].head()

Data Transformation:
    check on:
        - formatting
        - special character
        - data type esp float/int adn date formating
        - logic based on what data is about

    Converting data types
    convert data types = df['skldnf'].astype(int/float/string)

    Clean and Format dates
    df['Default_Date'] = pd.to_datetime(df['Date_of_Visit'], errors ='coerce',dayfirst=True).dt.strftime('%m-%d-%Y')
    # dayfirst=True means we let panda know the format in iso is DD-MM-YYYY for iso format DD-MM-YYYY @ MM-DD-YYYY
    # but if date is in YYYY-MM-DD pandas already year is in front so no need date

    Formating categorial data
    - standardized the string
        df['Weather'] =  df['Weather'].str.lower().str.strip()
        df['Weather'].unique()

    - shorten day name
        df['Day_Abbrev'] = df['Day_of_Week'].str[:3]
        df.head()

    Validating  data range
    missing data, unrealistic or just wrong :- need to validate either correct or wrong
        # use ternary operation and lambda, both fine
        # ternary (statement if true) if (operation) else (statement if false)
        df['Price'] = df['Price'].apply(lambda x: x if pd.notnull(x) and x > 0 else df['Price'].median())
        df[df['Price']] <= 0

Data Joining
    by merging using .merge
    - merged_pdf = customer.merge(data_1, on="id_data_1", how="inner/outer/left/right)
        - example table:
            table A:
            | ID | Name  | City      |
            |----|-------|-----------|
            | 1  | Ali   | KL        |
            | 2  | Bala  | Penang    |
            | 3  | Chong | Johor     |

            table B:
            | ID | Age | Dept      |
            |----|-----|-----------|
            | 2  | 25  | Finance   |
            | 3  | 30  | IT        |
            | 4  | 40  | Marketing |

        - inner - only keeps rows with matches in both tables
            | ID | Name  | City   | Age | Dept    |
            |----|-------|--------|-----|---------|
            | 2  | Bala  | Penang | 25  | Finance |
            | 3  | Chong | Johor  | 30  | IT      |

        - outer - keeps all rows from both tables
            | ID | Name  | City   | Age  | Dept      |
            |----|-------|--------|------|-----------|
            | 1  | Ali   | KL     | NULL | NULL      |
            | 2  | Bala  | Penang | 25   | Finance   |
            | 3  | Chong | Johor  | 30   | IT        |
            | 4  | NULL  | NULL   | 40   | Marketing |


        - left - keeps all rows from the left table
            | ID | Name  | City   | Age  | Dept      |
            |----|-------|--------|------|-----------|
            | 1  | Ali   | KL     | NULL | NULL      |
            | 2  | Bala  | Penang | 25   | Finance   |
            | 3  | Chong | Johor  | 30   | IT        |

        - right - keeps all rows from the right table
            | ID | Name  | City   | Age | Dept      |
            |----|-------|--------|-----|-----------|
            | 2  | Bala  | Penang | 25  | Finance   |
            | 3  | Chong | Johor  | 30  | IT        |
            | 4  | NULL  | NULL   | 40  | Marketing |

    grouping and aggregating data with .groupby()
    - avg_spending_by_gender = df.groupby("Gender")["Price"].mean().reset_index()
    # sometime use sum, mean or count

    - popular_food_by_occupation = df.groupby(["Occupation","Food_Item"]).size().reset_index(name="Count")